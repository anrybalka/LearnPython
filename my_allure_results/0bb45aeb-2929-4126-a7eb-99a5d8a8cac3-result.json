{"name": "test_site", "status": "broken", "statusDetails": {"message": "TypeError: Object of type type is not JSON serializable", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"54f1b2bf87ed0ced467b55f3157a0d0a\")>\n\n    def test_site(browser):\n        \"\"\"\n        Тест, который проверяет каждую страницу.\n        \"\"\"\n        startPageNum = 1  # Начинаем с первой страницы\n    \n        while True:\n            # Переход на страницу и проверка\n            browser.get(URL + \"?page=\" + str(startPageNum))\n>           title = browser.find_element(by=By)\n\n007_selenium\\tests\\test_002_film_like.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:400: in execute\n    data = utils.dump_json(params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\utils.py:24: in dump_json\n    return json.dumps(json_struct)\nC:\\Users\\anrybalka\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\nC:\\Users\\anrybalka\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\nC:\\Users\\anrybalka\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x00000284821CEBD0>\no = <class 'selenium.webdriver.common.by.By'>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return super().default(o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type type is not JSON serializable\n\nC:\\Users\\anrybalka\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\encoder.py:180: TypeError"}, "description": "\n    Тест, который проверяет каждую страницу.\n    ", "start": 1738875442911, "stop": 1738875443618, "uuid": "2f6134c6-ead6-4925-970b-25db1338b62e", "historyId": "5e23a374c725735fbee59921a63f0795", "testCaseId": "5e23a374c725735fbee59921a63f0795", "fullName": "007_selenium.tests.test_002_film_like#test_site", "labels": [{"name": "parentSuite", "value": "007_selenium.tests"}, {"name": "suite", "value": "test_002_film_like"}, {"name": "host", "value": "DESKTOP-T6K5P7L"}, {"name": "thread", "value": "9952-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "007_selenium.tests.test_002_film_like"}]}